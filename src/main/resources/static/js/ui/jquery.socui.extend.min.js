
jQuery(function($){jQuery.ajaxSetup({cache:false});});/*重置ajax并取消缓存*/

/*初始化语言*/
if ($.fn.pagination){
	$.fn.pagination.defaults.beforePageText = '第';
	$.fn.pagination.defaults.afterPageText = '共 {pages} 页';
	$.fn.pagination.defaults.displayMsg = '显示 {from} 到 {to},共 {total} 记录';
}
if ($.fn.datagrid){
	$.fn.datagrid.defaults.loadMsg = '正在处理，请稍待......';
	$.fn.datagrid.defaults.striped = true;
	$.extend($.fn.datagrid.methods, {
		// 初始化设置表格分页栏
		initPagination: function(jq, fn) {
			return jq.each(function() {
				var pager = $(this).datagrid().datagrid('getPager');
				if (pager) {
					pager.pagination({
						total: 0,
						pageSize: $soc.pageSize,
						pageNumber: 1,
						showPageList: false,
						onSelectPage: function(pageNum, pageSize) {
							if (fn) {
								fn.call(this, pageNum, pageSize);
							}
						}
					});
				}
			});
		}
	});
}
if ($.fn.treegrid && $.fn.datagrid){
	$.fn.treegrid.defaults.loadMsg = $.fn.datagrid.defaults.loadMsg;
}
if ($.messager){
	$.messager.defaults.ok = '确定';
	$.messager.defaults.cancel = '取消';
	$.messager.defaults.closable = false;
	// 扩展消息窗口(提示框)
	var _alert = $.messager.alert;
	$.messager.alert = function(title, msg, icon, fn) {
		if (typeof title == 'object') {
			var messager_alert_defaults = {
				title: '提示框',
				msg: '提示消息',
				icon: 'messager-icon messager-info',
				fn: function(data) {}
			};
			if (title.icon) {
				title.icon = 'messager-icon messager-' + title.icon;
			}
			var opts = $.extend({}, messager_alert_defaults, title);
			return _alert(opts);
		} else {
			return _alert(title, msg, icon, fn);
		}
	};
	// 扩展消息窗口(确认框)
	var _confirm = $.messager.confirm;
	$.messager.confirm = function(title, msg, fn) {
		if (typeof title == 'object') {
			var messager_confirm_defaults = {
				title: '确认框',
				msg: '是否要执行操作？',
				fn: function(data) {}
			};
			var opts = $.extend({}, messager_confirm_defaults, title);
			return _confirm(opts);
		} else {
			return _confirm(title, msg, fn);
		}
	}
}
$.map(['validatebox','textbox','passwordbox','maskedbox','filebox','searchbox',
		'combo','combobox','combogrid','combotree','datebox','datetimebox',
		'numberbox','spinner','numberspinner','timespinner','datetimespinner'], function(plugin){
	if ($.fn[plugin]){
		$.fn[plugin].defaults.missingMessage = '该输入项为必输项';
	}
});
if ($.fn.validatebox){
	$.fn.validatebox.defaults.rules.length.message = '输入内容长度必须介于{0}和{1}之间';
	$.fn.validatebox.defaults.rules.remote.message = '请修正该字段';
}
if ($.fn.calendar){
	$.fn.calendar.defaults.weeks = ['日','一','二','三','四','五','六'];
	$.fn.calendar.defaults.months = ['一月','二月','三月','四月','五月','六月','七月','八月','九月','十月','十一月','十二月'];
}
if ($.fn.datebox){
	$.fn.datebox.defaults.currentText = '今天';
	$.fn.datebox.defaults.okText = '确定';
	$.fn.datebox.defaults.closeText = '取消';
	$.fn.datebox.defaults.formatter = function(date){
		var y = date.getFullYear();
		var m = date.getMonth()+1;
		var d = date.getDate();
		return y+'-'+(m<10?('0'+m):m)+'-'+(d<10?('0'+d):d);
	};
	$.fn.datebox.defaults.parser = function(s){
		if (!s) return new Date();
		var ss = s.split('-');
		var y = parseInt(ss[0],10);
		var m = parseInt(ss[1],10);
		var d = parseInt(ss[2],10);
		if (!isNaN(y) && !isNaN(m) && !isNaN(d)){
			return new Date(y,m-1,d);
		} else {
			return new Date();
		}
	};
}
if ($.fn.datetimebox && $.fn.datebox){
	$.extend($.fn.datetimebox.defaults,{
		currentText: $.fn.datebox.defaults.currentText,
		closeText: $.fn.datebox.defaults.closeText,
		okText: $.fn.datebox.defaults.okText,
		editable: false
	});
}
if ($.fn.datetimespinner){
	$.fn.datetimespinner.defaults.selections = [[0,4],[5,7],[8,10],[11,13],[14,16],[17,19]]
}
if ($.fn.filebox) {
	$.fn.filebox.defaults.buttonText = '文件选择';
}
if ($.fn.switchbutton){
	$.fn.switchbutton.defaults.onText = '开启';
	$.fn.switchbutton.defaults.offText = '关闭';
	$.extend($.fn.switchbutton.methods, {
		getValue: function(jq) {
			return jq.data("switchbutton").switchbutton.find(".switchbutton-value").val();
		}
	});
}
if ($.fn.navigation) {
	$.fn.navigation.defaults.systemName = '系统名称';
	$.fn.navigation.defaults.loading = '正在加载导航菜单......';
	$.fn.navigation.defaults.nothing = '未配置任何导航菜单......';
}
if ($.fn.condition) {
	$.fn.condition.defaults.titleText = '筛选条件';
	$.fn.condition.defaults.buttonText = '重置';
}
if ($.fn.fastmenu) {
	$.fn.fastmenu.defaults.title = '快捷菜单';
	$.fn.fastmenu.defaults.addText = '添加';
	$.fn.fastmenu.defaults.editText = '编辑';
	$.fn.fastmenu.defaults.closeText = '折叠';
}
if ($.fn.risklegend){
	$.fn.risklegend.defaults.riskValueText = '风险值';
	$.fn.risklegend.defaults.riskLevelText = '风险等级';
	$.fn.risklegend.defaults.riskLabel = ['很低', '低', '中', '高', '很高'];
}
if ($.fn.transfer){
	$.fn.transfer.defaults.waitingTitle = '待选项';
	$.fn.transfer.defaults.selectedTitle = '已选项';
}
if ($.fn.form) {
	$.extend($.fn.form.methods, {
		// 扩展收集form数据函数
		collectData: function(el) {
			var form_collectData = {};
			var opts = $.data(el[0], 'form').options;
			el.find('[class*="socui-"]').each(function() {
				for(var i=0; i<opts.fieldTypes.length; i++){
					var type = opts.fieldTypes[i];
					var state = $(this).data(type);
					if (state){
						var key = $(this).attr(type + 'name');
						if (key) {
							var value = $(this)[type]('getValue') ? $(this)[type]('getValue') : null;
							if (!form_collectData[key]) {
								form_collectData[key] = value;
							}
						}
					}
				}
			});
			return form_collectData;
		}
	});
}
$.extend($.fn.switchbutton.defaults, {onValue:'true', offValue:'false', value:'', onChange:function(checked) {
	$(this).switchbutton('setValue', checked);
}});
/*初始化组件*/
$.extend($.fn.tabs.defaults,{tabHeight:28}); 
$.extend($.fn.textbox.defaults,{width:160, height:24, iconWidth:28});
$.extend($.fn.passwordbox.defaults,{width:160, height:24, iconWidth:28});
$.extend($.fn.combo.defaults,{width:160, height:24, iconWidth:28, editable:false});
$.extend($.fn.combobox.defaults,{width:160, height:24, iconWidth:28, editable:false, panelHeight:'auto'});
$.extend($.fn.combogrid.defaults,{width:160, height:24, iconWidth:28, editable:false, panelHeight:'auto'});
$.extend($.fn.combotree.defaults,{width:160, height:24, iconWidth:28, editable:false, panelHeight:'auto'});
$.extend($.fn.combotreegrid.defaults,{width:160, height:24, iconWidth:28, editable:false, panelHeight:'auto'});
$.extend($.messager.defaults,{width:320, height:120}); 
$.extend($.fn.datebox.defaults,{width:160, height:24, iconWidth:28, panelWidth:220});
$.extend($.fn.datetimebox.defaults,{width:160, height:24, iconWidth:28, panelWidth:220});
$.extend($.fn.datetimespinner.defaults,{width:160, height:24});
$.extend($.fn.numberbox.defaults,{width:160, height:24});
$.extend($.fn.spinner.defaults,{width:160, height:24});
$.extend($.fn.numberspinner.defaults,{width:160, height:24});
$.extend($.fn.timespinner.defaults,{width:160, height:24, showSeconds:true});
$.extend($.fn.searchbox.defaults,{width:160, height:24, iconWidth:28});
$.extend($.fn.filebox.defaults,{width:160, height:24});
$.extend($.fn.validatebox.defaults,{width:160, height:24});
$.extend($.fn.layout.paneldefaults,{collapsedSize:38});
// 清空重置tipOptions的样式,采用系统默认的tooltip样式
$.extend($.fn.validatebox.defaults.tipOptions, {
	onShow: function() {}
});
/*初始化校验*/
$.extend($.fn.validatebox.defaults.rules, {
	/**
	 * 最大长度校验
	 * @eg:maxLength[20]
	 */
	maxLength: {
		validator: function(value, param) {
			var max = param[0];
			if (value.length > max) {
				return false;
			}
			return true;
		},
		message: '输入内容的长度不能大于{0}'
	},
	/**
	 * 整数数字正则验证
	 */
	numberValidate: {
		validator: function(value, param) {
			var obj = sq_number_validate(value);
			return obj.result;
		},
		message: '输入的整数不合法'
	},
	/**
	 * IP验证正则验证
	 * @eg: ipValidate[0],ipValidate[4],ipValidate[6]
	 */
	ipValidate: {
		validator: function(value, param) {
			var obj;
			if (param) {
				var token = param[0];
				switch(token) {
				case 4:
					// 校验IPv4
					obj = sq_ipv4_validate(value);
					break;
				case 6:
					// 校验IPv6
					obj = sq_ipv6_validate(value);
					break;
				default:
					// 校验IP
					obj = sq_ip_validate(value);
					break;
				}
			} else {
				return true;
			}
			param[1] = obj.msg;
			return obj.result;
		},
		message: '{1}'
	},
	/**
	 * 密码验证正则表达式
	 */
	passwordValidate: {
		validator: function(value, param) {
			var obj = sq_password_validate(value);
			return obj.result;
		},
		message: '密码必须包含大小写字母、数字、特殊字符'
	},
	/**
	 * 输入框验证正则表达式
	 * @eg: inputValidate[0],inputValidate[1],inputValidate[2],inputValidate[3]
	 */
	inputValidate: {
		validator: function(value, param) {
			var obj;
			if (param) {
				var token = param[0];
				switch(token) {
				case 1:
					// 只允许输入汉字、字母、数字、“_”、“-”符号
					obj = sq_input2_validate(value);
					break;
				case 2:
					// 只允许输入汉字、字母、数字、“_”、“-”、“(”、“)”符号，且“_”和“-”只能位于中间位置
					obj = sq_input3_validate(value);
					break;
				case 3:
					// 只允许输入汉字、字母、数字、“_”、“-”、“/”符号，且“_”、“-”和“/”只能位于中间位置
					obj = sq_input4_validate(value);
					break;
				default:
					// 只允许输入汉字、字母、数字、“_”、“-”符号，且“_”和“-”只能位于中间位置
					obj = sq_input1_validate(value);
					break;
				}
			} else {
				return true;
			}
			param[1] = obj.msg;
			return obj.result;
		},
		message: '{1}'
	},
	/**
	 * 账号验证正则表达式
	 * @eg: accountValidate[0],accountValidate[1],accountValidate[2]
	 */
	accountValidate: {
		validator: function(value, param) {
			var obj;
			if (param) {
				var token = param[0];
				switch(token) {
				case 1:
					// 只允许输入字母、数字和“_”、“-”、“.”符号
					obj = sq_accountInput2_validate(value);
					break;
				case 2:
					// 只允许输入字母、数字和“_”、“-”、“@”、“.”符号
					obj = sq_accountInput3_validate(value);
					break;
				default:
					// 只允许输入字母、数字和“_”、“-”、“.”符号，且“_”、“-”、“.”只能位于中间位置
					obj = sq_accountInput1_validate(value);
					break;
				}
			} else {
				return true;
			}
			param[1] = obj.msg;
			return obj.result;
		},
		message: '{1}'
	},
	/**
	 * 名字输入框验证正则表达式
	 * @eg: nameValidate[0],nameValidate[1],nameValidate[2]，nameValidate[3]
	 */
	nameValidate: {
		validator: function(value, param) {
			var obj;
			if (param) {
				var token = param[0];
				switch(token) {
				case 1:
					// 只允许输入汉字、字母、数字、“_”、“-”、“.”符号
					obj = sq_nameInput2_validate(value);
					break;
				case 2:
					// 只允许输入汉字、字母、数字、“-”、“.”符号
					obj = sq_nameInput3_validate(value);
					break;
				case 3:
					// 只允许输入字母、数字、“-”、“.”符号
					obj = sq_nameInput4_validate(value);
					break;
				default:
					// 只允许输入汉字、字母、数字、“_”、“-”、“.”符号，且“_”、“-”、“.”只能位于中间位置
					obj = sq_nameInput1_validate(value);
					break;
				}
			} else {
				return true;
			}
			param[1] = obj.msg;
			return obj.result;
		},
		message: '{1}'
	},
	/**
	 * 时间验证正则表达式
	 * @eg: timeValidate[0],timeValidate[1]
	 */
	timeValidate: {
		validator: function(value, param) {
			var obj;
			if (param) {
				var token = param[0];
				switch(token) {
				case 1:
					// 正确的格式是hh:mm
					obj = sq_timeInput2_validate(value);
					break;
				default:
					// 正确的格式是hh:mm:ss
					obj = sq_timeInput1_validate(value);
					break;
				}
			} else {
				return true;
			}
			param[1] = obj.msg;
			return obj.result;
		},
		message: '{1}'
	},
	/**
	 * MAC地址验证正则表达式
	 */
	macValidate: {
		validator: function(value, param) {
			var obj = sq_macInput_validate(value);
			return obj.result;
		},
		message: 'Mac地址格式不正确。例如：00:00:00:00:00:00'
	},
	/**
	 * 邮件验证正则表达式
	 */
	emailValidate: {
		validator: function(value, param) {
			var obj;
			if (param) {
				var token = param[0];
				switch(token) {
				case 1:
					obj = sq_emailInputSearch_validate(value);
					break;
				default:
					obj = sq_emailInput_validate(value);
					break;
				}
			} else {
				return true;
			}
			param[1] = obj.msg;
			return obj.result;
		},
		message: '{1}'
	},
	/**
	 * 验证码验证正则表达式
	 */
	captchaValidate: {
		validator: function(value, param) {
			var obj = sq_captcha_validate(value);
			return obj.result;
		},
		message: '验证码格式不正确，只能输入数字和英文'
	},
	/**
	 * 端口验证正则表达式
	 */
	portValidate: {
		validator: function(value, param) {
			var obj = sq_portInput_validate(value);
			return obj.result;
		},
		message: '端口格式不正确，只能输入1~65535之间的整数'
	},
	/**
	 * 手机验证正则表达式
	 */
	mobileValidate: {
		validator: function(value, param) {
			var obj = sq_mobile_validate(value);
			return obj.result;
		},
		message: '手机号码格式不正确，只能输入数字并且最大长度为20'
	},
	/**
	 * 电话验证正则表达式
	 */
	telphoneValidate: {
		validator: function(value, param) {
			var obj = sq_telphone_validate(value);
			return obj.result;
		},
		message: '固定电话格式不正确'
	},
	/**
	 * 服务器验证正则表达式
	 */
	dnsValidate: {
		validator: function(value, param) {
			var obj = sq_ip_or_dns_validate(value);
			return obj.result;
		},
		message: '服务器格式不正确，应该为域名或IP地址'
	},
	/**
	 * URL验证正则表达式
	 */
	urlValidate: {
		validator: function(value, param) {
			var obj = sq_url_validate(value);
			return obj.result;
		},
		message: 'url格式不正确，如：http://www.baidu.com/'
	},
	/**
	 * 起始时间校验
	 */
	startDate: {
		validator: function(value, param) {
			var date = $(param).datetimebox('getValue');
			if (value && date) {
				var d1 = $SocUtil.strToDate(value);
				var d2 = $SocUtil.strToDate(date);
				if (d1 > d2) {
					return false;
				}
			}
			return true;
		},
		message: '起始时间不能大于终止时间'
	},
	/**
	 * 终止时间校验
	 */
	endDate: {
		validator: function(value, param) {
			var date = $(param).datetimebox('getValue');
			if (value && date) {
				var d1 = $SocUtil.strToDate(value);
				var d2 = $SocUtil.strToDate(date);
				if (d1 < d2) {
					return false;
				}
			}
			return true;
		},
		message: '终止时间不能小于起始时间'
	},
	/**
	 * 分隔符输入框校验
	 */
	splitValidate: {
		validator: function(value, param) {
			var obj;
			if (param) {
				var token = param[0];
				switch(token) {
				case 1:
					// 只允许输入字母、“|”符号，且“|”只能位于中间位置
					obj = sq_split1_validate(value);
					break;
				case 2:
					// 只允许输入字母、数字、“|”符号，且“|”只能位于中间位置
					obj = sq_split2_validate(value);
					break;
				case 3:
					// 只允许输入汉字、字母、数字、“|”符号，且“|”只能位于中间位置
					obj = sq_split3_validate(value);
					break;
				case 4:
					// 只允许输入字母、“,”符号，且“,”只能位于中间位置
					obj = sq_split4_validate(value);
					break;
				case 5:
					// 只允许输入字母、数字、“,”符号，且“,”只能位于中间位置
					obj = sq_split5_validate(value);
					break;
				case 6:
					// 只允许输入汉字、字母、数字、“,”符号，且“,”只能位于中间位置
					obj = sq_split6_validate(value);
					break;
				default:
					// 只允许输入汉字、字母、数字、“,”符号，且“,”只能位于中间位置
					obj = sq_split6_validate(value);
					break;
				}
			} else {
				return true;
			}
			param[1] = obj.msg;
			return obj.result;
		},
		message: '{1}'
	}
});
/*扩展窗口Dialog组件*/
$.extend($.fn.dialog.methods, {
	/**
	 * 扩展模态窗口创建接口(本工程统一采用该方法创建模态窗口)
	 */
	create: function(jq, opts) {
		return jq.each(function() {
			var _opts = {
				modal: true,
				cache: false,
				closed: false,
				closable: false,
				// 模态窗口关闭动画
				closeAnimation: function() {
					var target = $(this);
					target.parent().addClass('window-out');
					target.parent().next().addClass('window-out');
					target.addClass('window-out');
					setTimeout(function() {
						var opts = $.data(target[0], "panel").options;
						opts.onClose.call(target);
					}, 300);
				},
				onClose: function() {
					jq.dialog('destroy');
				},
				onDestroy: function() {
					var data = popDialog();
					opts.onComplete.call(this, data);
				}
			};
			var options = $.extend({}, $.fn.dialog.defaults, opts, _opts);
			pushDialog(jq.dialog(options));
		});
	}
});